import ast

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes

from config import (
    DELETE_PUBLISHED_CONFIRM,
    EDIT_PUBLISHED_BUTTONS,
    EDIT_PUBLISHED_MENU,
    EDIT_PUBLISHED_TEXT,
    MAIN_MENU,
    MANAGE_PUBLISHED_BUTTONS,
)
from database import get_published_post, update_published_post
from handlers import PostHandlers
from scheduled_handlers import ScheduledPostHandlers
from utils import (
    clean_unsupported_formatting,
    create_button_management_keyboard,
    create_buttons_markup,
    create_main_keyboard,
    detect_parse_mode,
    entities_to_html,
    parse_buttons,
)


class ChannelBot:
    def __init__(self, scheduler: AsyncIOScheduler):
        self.scheduler = scheduler
        self.post_handlers = PostHandlers(self)
        self.scheduled_handlers = ScheduledPostHandlers(self)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """main menu of bot."""
        welcome_text = "–í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∫–µ—Ä—É–≤–∞—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è–º–∏ —É –≤–∞—à–æ–º—É –∫–∞–Ω–∞–ª—ñ."
        await update.message.reply_text(
            welcome_text, reply_markup=create_main_keyboard()
        )
        return MAIN_MENU

    async def main_menu_handler(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """handle choice from main menu."""
        text = update.message.text
        if "–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç" in text:
            return await self.post_handlers.create_post_start(update, context)
        elif "–í—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ –ø–æ—Å—Ç–∏" in text:
            return await self.scheduled_handlers.view_scheduled_posts(update, context)
        return MAIN_MENU

    async def edit_delete_published_handler(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """handler for editing/deleting published posts."""
        from telegram.ext import ConversationHandler

        query = update.callback_query
        await query.answer()
        action, msg_id, channel_id = query.data.split("_")

        if action == "editpublished":
            # load published post data
            row = get_published_post(channel_id, int(msg_id))
            if not row:
                await query.message.reply_text(
                    "‚ùå –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ."
                )
                return ConversationHandler.END
            user_id, text, photo_id, buttons = row
            photos = []
            if photo_id:
                try:
                    photos = (
                        ast.literal_eval(photo_id)
                        if photo_id.startswith("[")
                        else [photo_id]
                    )
                except Exception:
                    photos = [photo_id]
            if buttons:
                try:
                    buttons = ast.literal_eval(buttons)
                except Exception:
                    buttons = []
            else:
                buttons = []

            context.user_data["editing_published"] = {
                "channel_id": channel_id,
                "message_id": int(msg_id),
                "text": text or "",
                "photos": photos,
                "buttons": buttons,
            }

            from telegram import InlineKeyboardButton, InlineKeyboardMarkup

            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="ep_edit_text"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏", callback_data="ep_edit_buttons"
                    )
                ],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="ep_cancel")],
            ]
            await query.message.reply_text(
                "üìù –í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —É –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ–º—É –ø–æ—Å—Ç—ñ:",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
            return EDIT_PUBLISHED_MENU

        elif action == "deletepublished":
            # show confirmation dialog
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup

            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏",
                        callback_data=f"dp_confirm_{msg_id}_{channel_id}",
                    )
                ],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="dp_cancel")],
            ]
            await query.edit_message_text(
                f"‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç –∑ –∫–∞–Ω–∞–ª—É @{channel_id}?\n\n"
                "–¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏!",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
            return DELETE_PUBLISHED_CONFIRM
        return ConversationHandler.END

    async def edit_published_menu_handler(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        from telegram.ext import ConversationHandler

        query = update.callback_query
        await query.answer()
        data = query.data
        if data == "ep_edit_text":
            await query.edit_message_text(
                "‚úèÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ (–ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è Markdown/HTML)."
            )
            return EDIT_PUBLISHED_TEXT
        elif data == "ep_edit_buttons":
            await query.edit_message_text(
                "‚úèÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: `–ù–∞–∑–≤–∞ –∫–Ω–æ–ø–∫–∏ - https://example.com`\n"
                "–ö–æ–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ.",
                parse_mode="Markdown",
            )
            return EDIT_PUBLISHED_BUTTONS
        else:
            context.user_data.pop("editing_published", None)
            await query.edit_message_text("‚úÖ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            return ConversationHandler.END

    async def edit_published_text(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        from telegram.ext import ConversationHandler

        data = context.user_data.get("editing_published")
        if not data:
            await update.message.reply_text("‚ùå –î–∞–Ω—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            return ConversationHandler.END
        channel_id = data["channel_id"]
        message_id = data["message_id"]
        new_text = update.message.text or ""

        # Convert entities to HTML tags to preserve formatting
        if update.message.entities:
            new_text = entities_to_html(new_text, update.message.entities)

        # Clean unsupported formatting before sending
        clean_text = clean_unsupported_formatting(new_text)
        parse_mode = detect_parse_mode(clean_text)
        buttons_markup = create_buttons_markup(data.get("buttons"))

        try:
            if data.get("photos"):
                await context.bot.edit_message_caption(
                    chat_id=f"@{channel_id}",
                    message_id=message_id,
                    caption=clean_text,
                    parse_mode=parse_mode,
                    reply_markup=buttons_markup,
                )
            else:
                await context.bot.edit_message_text(
                    chat_id=f"@{channel_id}",
                    message_id=message_id,
                    text=clean_text,
                    parse_mode=parse_mode,
                    reply_markup=buttons_markup,
                )
            update_published_post(channel_id, message_id, text=clean_text)
            data["text"] = clean_text
            context.user_data["editing_published"] = data
            await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç: {e}")
            return EDIT_PUBLISHED_TEXT

        # Show menu again
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="ep_edit_text")],
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏", callback_data="ep_edit_buttons"
                )
            ],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="ep_cancel")],
        ]
        await update.message.reply_text(
            "–©–æ —Ä–µ–¥–∞–≥—É—î–º–æ –¥–∞–ª—ñ?", reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDIT_PUBLISHED_MENU

    async def edit_published_buttons(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """Show button management interface for published posts."""
        data = context.user_data.get("editing_published", {})
        buttons = data.get("buttons", [])

        keyboard = create_button_management_keyboard(buttons, "published")
        await update.message.reply_text(
            "üìã *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–Ω–æ–ø–∫–∞–º–∏:*\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ùå —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫—É\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ûï —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–Ω–æ–ø–∫—É\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚úÖ –∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )
        return MANAGE_PUBLISHED_BUTTONS

    async def manage_published_buttons_handler(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """Handle button management for published posts."""
        query = update.callback_query
        await query.answer()

        data = query.data
        buttons = context.user_data.get("editing_published", {}).get("buttons", [])

        if data.startswith("btn_del_published_"):
            # delete button
            idx = int(data.split("_")[-1])
            if 0 <= idx < len(buttons):
                deleted_btn = buttons.pop(idx)
                context.user_data["editing_published"]["buttons"] = buttons
                await query.answer(f"–í–∏–¥–∞–ª–µ–Ω–æ: {deleted_btn['text']}")

            # refresh keyboard
            keyboard = create_button_management_keyboard(buttons, "published")
            await query.edit_message_reply_markup(reply_markup=keyboard)
            return MANAGE_PUBLISHED_BUTTONS

        elif data == "btn_add_published":
            # prompt to add new button
            await query.message.reply_text(
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–Ω–æ–ø–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: `–ù–∞–∑–≤–∞ –∫–Ω–æ–ø–∫–∏ - https://example.com`",
                parse_mode="Markdown",
            )
            context.user_data["adding_button_to"] = "editing_published"
            return MANAGE_PUBLISHED_BUTTONS

        elif data == "btn_finish_published":
            # Save changes to published post
            from telegram.ext import ConversationHandler

            pub_data = context.user_data.get("editing_published")
            if not pub_data:
                await query.message.reply_text("‚ùå –î–∞–Ω—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
                return ConversationHandler.END

            channel_id = pub_data["channel_id"]
            message_id = pub_data["message_id"]

            try:
                buttons_markup = create_buttons_markup(buttons)
                await context.bot.edit_message_reply_markup(
                    chat_id=f"@{channel_id}",
                    message_id=message_id,
                    reply_markup=buttons_markup,
                )
                update_published_post(channel_id, message_id, buttons=buttons)
                await query.message.reply_text("‚úÖ –ö–Ω–æ–ø–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ!")
            except Exception as e:
                await query.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏: {e}")
                return MANAGE_PUBLISHED_BUTTONS

            from telegram import InlineKeyboardButton, InlineKeyboardMarkup

            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="ep_edit_text"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏", callback_data="ep_edit_buttons"
                    )
                ],
                [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="ep_cancel")],
            ]
            await query.message.reply_text(
                "–©–æ —Ä–µ–¥–∞–≥—É—î–º–æ –¥–∞–ª—ñ?", reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return EDIT_PUBLISHED_MENU

        return MANAGE_PUBLISHED_BUTTONS

    async def add_single_button_to_published_handler(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """Add a single button when editing published post."""
        adding_to = context.user_data.get("adding_button_to")
        if adding_to != "editing_published":
            # Not for published posts, skip this handler
            return None

        try:
            buttons = parse_buttons(update.message.text)
            if buttons:
                current_buttons = context.user_data.get("editing_published", {}).get(
                    "buttons", []
                )
                current_buttons.extend(buttons)
                context.user_data["editing_published"]["buttons"] = current_buttons
                await update.message.reply_text("‚úÖ –ö–Ω–æ–ø–∫—É –¥–æ–¥–∞–Ω–æ!")

            context.user_data.pop("adding_button_to", None)

            # show updated keyboard
            keyboard = create_button_management_keyboard(current_buttons, "published")
            await update.message.reply_text(
                "üìã *–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–Ω–æ–ø–∫–∞–º–∏:*\n\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ùå —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫—É\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ûï —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–Ω–æ–ø–∫—É\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚úÖ –∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ",
                reply_markup=keyboard,
                parse_mode="Markdown",
            )
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå {e}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ: `–ù–∞–∑–≤–∞ - URL`",
                parse_mode="Markdown",
            )

        return MANAGE_PUBLISHED_BUTTONS

    async def delete_published_confirm_handler(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """handle delete confirmation for published posts."""
        from telegram.ext import ConversationHandler

        query = update.callback_query
        await query.answer()

        if query.data == "dp_cancel":
            await query.edit_message_text("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            return ConversationHandler.END

        elif query.data.startswith("dp_confirm_"):
            # extract message_id and channel_id from callback data
            parts = query.data.split("_")
            msg_id = parts[2]
            channel_id = parts[3]

            try:
                await context.bot.delete_message(
                    chat_id=f"@{channel_id}", message_id=int(msg_id)
                )
                await query.edit_message_text("‚úÖ –ü–æ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–∞–Ω–∞–ª—É.")
            except Exception as e:
                await query.edit_message_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç: {e}")

        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """cancel operation."""
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove()
        )
        return await self.start(update, context)
